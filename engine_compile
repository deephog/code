def build_engine(onnx_file_path, batch_size):
    # initialize TensorRT engine and parse ONNX model
    builder = trt.Builder(TRT_LOGGER)
    config = builder.create_builder_config()
    config.set_flag(trt.BuilderFlag.FP16)
    config.set_flag(trt.BuilderFlag.STRICT_TYPES)
    # config.set_flag(trt.BuilderFlag.SPARSE_WEIGHTS)
    config.max_workspace_size = 1<<30
    explicit_batch = 1 << (int)(trt.NetworkDefinitionCreationFlag.EXPLICIT_BATCH)

    network = builder.create_network(explicit_batch)
    parser = trt.OnnxParser(network, TRT_LOGGER)
    
    # parse ONNX
    with open(onnx_file_path, 'rb') as model:
        print('Beginning ONNX file parsing')
        parser.parse(model.read())
    print('Completed parsing of ONNX file')

    builder.max_batch_size = batch_size
    network.get_input(0).shape = (8, 6, 720, 1280)

    print('Building an engine...')
    engine = builder.build_serialized_network(network, config=config)
    # context = engine.create_execution_context()
    print("Completed creating Engine")
    return engine
